1. express 路由
2. ajax跨域的解决
3. 模板引擎
4. 连接mongodb，操作数据库
5. git 和 github
6. 周六2点

--------------------------------------------------------

推荐资料：https://study.miaov.com/study/show/chapter/7

----------------------------------------------------

不再频繁的手动启动修改后的node服务，因为文件修改后，必须重启才能有作用

supversior

npm install supervisor
	-g 全局安装，安装后就可以使用supervisor模块提供的命令，npm所安装的目录下
		找全局安装的：C:\Users\pcname\AppData\Roaming\npm
	-save -save-dev 不是全局安装，局部安装，是在装所在项目的node_modules目录中

window路径：F:\miaov\课件\2018-08-27班级\2018-09-07\express-learn
mac路径 /home/var/abc


前后端分离
前后端不分离

分离和不分离 主要是 数据和模板结合的位置是不一样的，

前后端分离 结合在前端
前后端不分离 结合在后端

前后端分离
	前端处理 数据 + 模板 ，前端的模板引擎 主导在前端
	前端可以选择主流的框架 react vue

前后端不分离
	后端处理 数据 + 模板 ，后端的模板引擎 主导在后端

	安装模板引擎：npm install --save art-template 
	npm install --save express-art-template


-------------------------------------------------------
跨域
	
	1. cors 跨站资源共享
			CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。

			它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。
			http://www.ruanyifeng.com/blog/2016/04/cors.html

			设置允许访问的响应头
			Access-Control-Allow-Origin 响应头指定了该响应的资源是否被允许与给定的origin共享。

			res.header('Access-Control-Allow-Origin', 'http://localhost:3000  / *'); //必须重新设置，把origin的域加上去
			 res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
			 res.header('Access-Control-Allow-Headers', 'x-custom,abc');
			 res.header('Access-Control-Allow-Credentials', 'true');//和客户端对应，必须设置以后，

	2. 代理的方式
			前端页面：localhost:3000/index.html 在页面中发送ajax请求smartisan.com/是不允许的

			接口：https://www.smartisan.com/product/spus?category_id=69&page=1&page_size=20&sort=sort

			解决：
				自己写后端，后端是不存在跨域的，用自己的写的后端去访问smartisan.com/,前端的ajax请求自己的服务

	3. jsonp 


html标签中可以跨域的 
	link
	img
	script

所谓同源是指，域名，协议，端口相同。
	有一个不相同就产生跨域

	proxy: /api
		{
		traget: 'm.kugou.com'
		}

	localhost:3000/api


	ajax
		原生规范 XMLHttpRequst

		简陋 jq封装过的

		$.ajax({

		})

	node
		原生模块 http

		使用express 封装的就是http模块

--------------------------------------------
git工具 分布式版本控制系统
github网站 托管代码的网站
	https://github.com/
	https://github.com/WYseven

学习的目标：把本地的代码上传到github上

git工具，下载安装
	
	教程：
		https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

		https://git-scm.com/book/zh/v2
		git权威指南
	下载：
		https://git-scm.com/download/win



git工具 版本控制

	最终要形成最终版本

git三个区
	工作区
		开发代码的目录就是工作区
	缓存区
	版本库

git命令：
	git init 初始化一下，这个目录归git管理
		会生成一个.git的文件夹


	git status 查看当前工作区文件的状态
		Untracked files: 这个文件未被跟踪，没有提交到缓存区


	git add <filename> / . 把工作区的文件提交到缓存区
	git rm --cache <filename> 清除缓存区的文件
	git checkout -- <filename> 从缓存拉回文件到工作区

	git reset HEAD <filename>  从版本库拉回文件到缓存区

	git reset --hard HEAD^/commitId  把版本库的文件拉倒缓存区和工作区


	git log --pretty=oneline 所有提交到日志
	git  reflog 所有操作的日志


	git clone 仓库地址


忽略项目中的文件或文件夹，在项目目录下创建.gitignore文件，里面写上要忽略的文件或目录


git链接github	
	设置贡献者：
		 git config --global user.name  "你的用户名"//你的GitHub登陆名
		 git config --global user.email "你的邮箱"//你的GitHub注册邮箱

	在本地生成ssh
		ssh-keygen -t rsa -C "你的邮箱" //是你自己注册GitHub的邮箱
		一路回车
		出现一个提示信息：Your identification has been saved ：保存.ssh的本机地址

		在.ssh中生成两个文件
			id_rsa 私钥
			id_rsa.pub 公钥

			公钥将来给github使用

			在github中找到 /settings/keys 添加ssh


		测试是否连接成功
			ssh -T git@github.com

			出现连接成功：
				Hi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.

		在本地敲这些命令
			git init 一次
			git add README.md n多次
			git commit -m "first commit" n多次
			git remote add origin git@github.com:WYseven/test-0907.git 一次
			git push -u origin master n多次

		修改后再上传
			git add README.md n多次
			git commit -m "first commit" n多次
			git push 


推荐使用markdown:https://www.zybuluo.com/mdeditor

https://www.appinn.com/markdown/#list